{-# LANGUAGE TypeInType #-}
module Control.FSM.Monad.Internal (MachineT(..), runMachineT, EventIdKind, StateIdKind, FSM(..), FSMValidTransition(..), MonadFSM(..)) where

import Control.Applicative
import Control.Monad.Except
import Control.Monad.Reader.Class
import Control.Monad.Writer.Class
import Control.Monad.State
import Data.Kind
import GHC.TypeLits

-- | This monad transformer wraps the effect monad @m@ that the FSM @mach@ uses. For 'mtl' style code, you'll have to derive any other instances you need.
newtype MachineT mach m a = MachineT { unMachineT :: StateT (StateType mach) m a }
                          deriving (Functor, Applicative, Alternative, Monad, MonadPlus, MonadTrans)

-- | This converts the 'MachineT' representation of a state machine's actions into a monadic action in the effect monad.
runMachineT :: (FSM mach) => MachineT mach m a -> m (a, StateType mach)
runMachineT m = runStateT (unMachineT m) initialState

instance (MonadError e m) => MonadError e (MachineT mach m) where
    throwError = lift . throwError
    catchError (MachineT m) handler = MachineT $ catchError m (unMachineT . handler)

instance (MonadReader r m) => MonadReader r (MachineT mach m) where
    ask = lift ask
    reader = lift . reader
    local f (MachineT m) = MachineT $ local f m

instance (MonadWriter w m) => MonadWriter w (MachineT mach m) where
    writer = lift . writer
    tell = lift . tell
    listen (MachineT m) = MachineT $ listen m
    pass (MachineT m) = MachineT $ pass m

instance (MonadState s m) => MonadState s (MachineT mach m) where
    state f = MachineT $ lift (state f)

type family EventIdKind event :: Type
type family StateIdKind event :: Type

-- | An instance of this class represents a particular FSM generated by this library.
class FSM mach where
    -- | This holds @mach@'s event data type, obfuscating the event type.
    data EventType mach :: Type
    -- | This is the base event data type.
    type EventType' mach = (out :: EventIdKind mach -> Type) | out -> mach
    -- | This holds @mach@'s state data type, obfuscating the event type.
    data StateType mach :: Type
    -- | This is the base state data type.
    type StateType' mach = (out :: StateIdKind mach -> Type) | out -> mach

    wrapEvent :: EventType' mach a -> EventType mach
    wrapState :: StateType' mach a -> StateType mach

    initialState :: StateType mach

class FSMValidTransition (mach :: machine) (from :: state) (via :: event) (to :: state)

class (FSM mach, Monad m) => MonadFSM mach m | m -> mach where
    withMachineState :: (StateType mach -> a) -> m a
    doTransition :: (FSMValidTransition mach from via to) => (StateType' mach from -> EventType' mach via -> m (StateType' mach to)) -> StateType' mach from -> EventType' mach via -> m ()

instance (FSM mach, Monad m) => MonadFSM mach (MachineT mach m) where
    withMachineState f = f <$> MachineT get

    doTransition action from via = do
        to <- action from via
        MachineT $ put (wrapState to)
